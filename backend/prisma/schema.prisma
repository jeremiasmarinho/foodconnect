// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

// User model for authentication and profile
model User {
  id        String   @id @default(cuid())
  email     String   @unique
  username  String   @unique
  name      String
  avatar    String?
  bio       String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Authentication
  password String

  // Relations
  posts     Post[]
  likes     Like[]
  comments  Comment[]
  follows   Follow[]  @relation("UserFollows")
  followers Follow[]  @relation("UserFollowers")
  orders    Order[]

  @@map("users")
}

// Restaurant model
model Restaurant {
  id          String  @id @default(cuid())
  name        String
  description String?
  address     String
  city        String
  state       String
  zipCode     String
  phone       String?
  email       String?
  website     String?
  imageUrl    String?
  latitude    Float?
  longitude   Float?

  // Restaurant specific fields
  category     String? // pizza, burger, sushi, etc.
  cuisine      String? // Italian, Japanese, Brazilian, etc.
  rating       Float? // Average rating
  deliveryTime String? // "25-35 min"
  deliveryFee  Float? // Delivery fee in currency
  minimumOrder Float? // Minimum order value
  isOpen       Boolean @default(true)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  posts     Post[]
  menuItems MenuItem[]
  orders    Order[]

  @@map("restaurants")
}

// Post model for food discoveries
model Post {
  id        String   @id @default(cuid())
  content   String
  imageUrl  String?
  rating    Int? // 1-5 stars
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  userId       String
  user         User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  restaurantId String
  restaurant   Restaurant @relation(fields: [restaurantId], references: [id], onDelete: Cascade)
  likes        Like[]
  comments     Comment[]

  @@map("posts")
}

// Like model
model Like {
  id     String @id @default(cuid())
  userId String
  postId String

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  post Post @relation(fields: [postId], references: [id], onDelete: Cascade)

  @@unique([userId, postId])
  @@map("likes")
}

// Comment model
model Comment {
  id        String   @id @default(cuid())
  content   String
  createdAt DateTime @default(now())
  userId    String
  postId    String

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  post Post @relation(fields: [postId], references: [id], onDelete: Cascade)

  @@map("comments")
}

// Follow model for user relationships
model Follow {
  id          String @id @default(cuid())
  followerId  String
  followingId String

  follower  User @relation("UserFollows", fields: [followerId], references: [id], onDelete: Cascade)
  following User @relation("UserFollowers", fields: [followingId], references: [id], onDelete: Cascade)

  @@unique([followerId, followingId])
  @@map("follows")
}

// Menu Item model - Items available in restaurants
model MenuItem {
  id          String   @id @default(cuid())
  name        String
  description String?
  price       Float
  imageUrl    String?
  category    String // appetizer, main, dessert, beverage
  isAvailable Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  restaurantId String
  restaurant   Restaurant  @relation(fields: [restaurantId], references: [id], onDelete: Cascade)
  orderItems   OrderItem[]

  @@map("menu_items")
}

// Order model - Customer orders
model Order {
  id              String   @id @default(cuid())
  status          String   @default("pending") // pending, confirmed, preparing, ready, delivered, cancelled
  total           Float
  deliveryFee     Float    @default(0)
  subtotal        Float
  notes           String?
  deliveryAddress String?
  estimatedTime   String? // "25-35 min"
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  // Relations
  userId       String
  user         User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  restaurantId String
  restaurant   Restaurant  @relation(fields: [restaurantId], references: [id], onDelete: Cascade)
  orderItems   OrderItem[]

  @@map("orders")
}

// Order Item model - Items within an order
model OrderItem {
  id       String  @id @default(cuid())
  quantity Int
  price    Float // Price at time of order
  notes    String? // Special instructions

  // Relations
  orderId    String
  order      Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)
  menuItemId String
  menuItem   MenuItem @relation(fields: [menuItemId], references: [id], onDelete: Cascade)

  @@map("order_items")
}
