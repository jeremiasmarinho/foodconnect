// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

// User model for authentication and profile
model User {
  id        String   @id @default(cuid())
  email     String   @unique
  username  String   @unique
  name      String
  avatar    String?
  bio       String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Authentication
  password        String
  emailVerified   Boolean   @default(false)
  emailVerifiedAt DateTime?

  // Relations
  posts                   Post[]
  likes                   Like[]
  comments                Comment[]
  follows                 Follow[]                 @relation("UserFollows")
  followers               Follow[]                 @relation("UserFollowers")
  orders                  Order[]
  notifications           Notification[]
  pushSubscriptions       PushSubscription[]
  refreshTokens           RefreshToken[]
  passwordResetTokens     PasswordResetToken[]
  emailVerificationTokens EmailVerificationToken[]
  achievements            UserAchievement[]
  favoriteEstablishments  FavoriteEstablishment[]
  taggedInPosts           PostTag[]                // Posts where user is tagged

  // Indexes for common queries
  @@index([email]) // Login queries
  @@index([username]) // Profile lookups
  @@index([name]) // Search by name
  @@index([createdAt]) // Sort by join date
  @@map("users")
}

// Establishment model for restaurants and bars
model Establishment {
  id           String           @id @default(cuid())
  name         String
  description  String?
  address      String
  city         String
  state        String
  zipCode      String
  phone        String?
  email        String?
  website      String?
  imageUrl     String?
  type         EstablishmentType // RESTAURANT or BAR
  category     String           // e.g., "Fast Food", "Fine Dining", "Sports Bar", "Nightclub"
  cuisine      String?          // e.g., "Italian", "Mexican", "Asian" (for restaurants)
  ambiance     String?          // e.g., "Cozy", "Lively", "Romantic" (for bars)
  priceRange   Int              @default(1) // 1-4 ($, $$, $$$, $$$$)
  rating       Float            @default(0)
  isOpen       Boolean          @default(true)
  openingTime  String?          // "09:00"
  closingTime  String?          // "22:00"
  hasLiveMusic Boolean          @default(false) // For bars
  hasKaraoke   Boolean          @default(false) // For bars
  hasDanceFloor Boolean         @default(false) // For bars
  createdAt    DateTime         @default(now())
  updatedAt    DateTime         @updatedAt

  // Relations
  posts            Post[]
  menuItems        MenuItem[]
  orders           Order[]
  favoritedByUsers FavoriteEstablishment[]

  // Indexes for common queries
  @@index([name]) // Search by name
  @@index([city, state]) // Location-based searches
  @@index([type]) // Filter by type (restaurant/bar)
  @@index([category]) // Filter by category
  @@index([cuisine]) // Filter by cuisine
  @@index([rating]) // Sort by rating
  @@index([isOpen]) // Filter by open status
  @@index([createdAt]) // Sort by creation date
  @@map("establishments")
}

enum EstablishmentType {
  RESTAURANT
  BAR
}

enum PostType {
  FOOD
  DRINKS
  SOCIAL
}

// Post model for food and social discoveries
model Post {
  id          String   @id @default(cuid())
  content     String
  imageUrls   String   // JSON array of image URLs
  rating      Int? // 1-5 stars
  postType    PostType @default(FOOD) // FOOD, DRINKS, SOCIAL
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  userId          String
  user            User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  establishmentId String?
  establishment   Establishment? @relation(fields: [establishmentId], references: [id], onDelete: Cascade)
  likes           Like[]
  comments        Comment[]
  taggedUsers     PostTag[]     // Users tagged in this post

  // Indexes for common queries
  @@index([userId]) // Posts by user
  @@index([establishmentId]) // Posts by establishment
  @@index([createdAt]) // Feed sorting by date
  @@index([rating]) // Sort by rating
  @@index([postType]) // Filter by post type
  @@index([userId, createdAt]) // User's posts chronologically
  @@index([establishmentId, createdAt]) // Establishment's posts chronologically
  @@map("posts")
}

// PostTag model for tagging friends in posts
model PostTag {
  id       String @id @default(cuid())
  postId   String
  userId   String
  x        Float? // X coordinate for photo tagging (0-1)
  y        Float? // Y coordinate for photo tagging (0-1)
  imageIndex Int @default(0) // Which image in the post (for multiple images)

  // Relations
  post Post @relation(fields: [postId], references: [id], onDelete: Cascade)
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([postId, userId]) // A user can only be tagged once per post
  @@index([postId]) // Tags for a post
  @@index([userId]) // Posts where user is tagged
  @@map("post_tags")
}

// Like model
model Like {
  id     String @id @default(cuid())
  userId String
  postId String

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  post Post @relation(fields: [postId], references: [id], onDelete: Cascade)

  @@unique([userId, postId])
  @@index([postId]) // Count likes per post
  @@index([userId]) // User's liked posts
  @@map("likes")
}

// Comment model
model Comment {
  id        String   @id @default(cuid())
  content   String
  createdAt DateTime @default(now())
  userId    String
  postId    String

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  post Post @relation(fields: [postId], references: [id], onDelete: Cascade)

  @@index([postId]) // Comments for a post
  @@index([userId]) // User's comments
  @@index([postId, createdAt]) // Comments chronologically
  @@map("comments")
}

// Follow model for user relationships
model Follow {
  id          String @id @default(cuid())
  followerId  String
  followingId String

  follower  User @relation("UserFollows", fields: [followerId], references: [id], onDelete: Cascade)
  following User @relation("UserFollowers", fields: [followingId], references: [id], onDelete: Cascade)

  @@unique([followerId, followingId])
  @@map("follows")
}

// Menu Item model - Items available in restaurants and bars
model MenuItem {
  id          String   @id @default(cuid())
  name        String
  description String?
  price       Float
  imageUrl    String?
  category    String // appetizer, main, dessert, beverage, cocktail, beer, wine
  isAvailable Boolean  @default(true)
  alcoholContent Float? // For drinks - alcohol percentage
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  establishmentId String
  establishment   Establishment @relation(fields: [establishmentId], references: [id], onDelete: Cascade)
  orderItems      OrderItem[]

  @@index([establishmentId]) // Menu items by establishment
  @@index([category]) // Filter by category
  @@index([isAvailable]) // Available items
  @@index([price]) // Sort by price
  @@index([establishmentId, category]) // Establishment menu by category
  @@map("menu_items")
}

// Order model - Customer orders
model Order {
  id              String   @id @default(cuid())
  status          String   @default("pending") // pending, confirmed, preparing, ready, delivered, cancelled
  total           Float
  deliveryFee     Float    @default(0)
  subtotal        Float
  notes           String?
  deliveryAddress String?
  estimatedTime   String? // "25-35 min"
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  // Relations
  userId          String
  user            User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  establishmentId String
  establishment   Establishment @relation(fields: [establishmentId], references: [id], onDelete: Cascade)
  orderItems      OrderItem[]

  @@index([userId]) // User's orders
  @@index([establishmentId]) // Establishment's orders
  @@index([status]) // Filter by status
  @@index([createdAt]) // Sort by date
  @@index([userId, createdAt]) // User's order history
  @@index([establishmentId, status]) // Establishment's orders by status
  @@map("orders")
}

// Order Item model - Items within an order
model OrderItem {
  id       String  @id @default(cuid())
  quantity Int
  price    Float // Price at time of order
  notes    String? // Special instructions

  // Relations
  orderId    String
  order      Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)
  menuItemId String
  menuItem   MenuItem @relation(fields: [menuItemId], references: [id], onDelete: Cascade)

  @@map("order_items")
}

// Notification model for real-time notifications
model Notification {
  id        String    @id @default(cuid())
  userId    String
  type      String // 'like', 'comment', 'order', 'order-status', 'new-post', 'follow'
  title     String
  message   String
  data      String    @default("{}") // JSON string for additional data
  read      Boolean   @default(false)
  readAt    DateTime?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  // Indexes for performance
  @@index([userId]) // User's notifications
  @@index([userId, read]) // Unread notifications
  @@index([userId, createdAt]) // Notifications by date
  @@index([type]) // Filter by notification type
  @@map("notifications")
}

// Push Subscription model for web push notifications
model PushSubscription {
  id        String   @id @default(cuid())
  userId    String
  endpoint  String
  p256dh    String // Public key for encryption
  auth      String // Authentication secret
  userAgent String? // Browser/device info
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  // Indexes
  @@unique([userId, endpoint]) // Prevent duplicate subscriptions
  @@index([userId]) // User's subscriptions
  @@map("push_subscriptions")
}

// Refresh Token model for authentication
model RefreshToken {
  id        String   @id @default(cuid())
  token     String   @unique
  userId    String
  expiresAt DateTime
  createdAt DateTime @default(now())
  isRevoked Boolean  @default(false)
  userAgent String?
  ipAddress String?

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  // Indexes
  @@index([userId]) // User's refresh tokens
  @@index([expiresAt]) // Cleanup expired tokens
  @@map("refresh_tokens")
}

// Password Reset Token model
model PasswordResetToken {
  id        String   @id @default(cuid())
  token     String   @unique
  userId    String
  expiresAt DateTime
  createdAt DateTime @default(now())
  isUsed    Boolean  @default(false)

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  // Indexes
  @@index([userId]) // User's reset tokens
  @@index([expiresAt]) // Cleanup expired tokens
  @@map("password_reset_tokens")
}

// Email Verification Token model
model EmailVerificationToken {
  id        String   @id @default(cuid())
  token     String   @unique
  userId    String
  expiresAt DateTime
  createdAt DateTime @default(now())
  isUsed    Boolean  @default(false)

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  // Indexes
  @@index([userId]) // User's verification tokens
  @@index([expiresAt]) // Cleanup expired tokens
  @@map("email_verification_tokens")
}

// Achievement model for user badges and accomplishments
model Achievement {
  id          String   @id @default(cuid())
  name        String   @unique // e.g., "Primeiro Post", "Explorador", "Social"
  description String
  icon        String // Icon name or emoji
  category    String // "social", "explorer", "creator", "foodie"
  condition   String // JSON with condition details
  points      Int      @default(0) // Points awarded
  createdAt   DateTime @default(now())

  // Relations
  userAchievements UserAchievement[]

  @@map("achievements")
}

// UserAchievement model for tracking user's earned achievements
model UserAchievement {
  id            String   @id @default(cuid())
  userId        String
  achievementId String
  earnedAt      DateTime @default(now())
  progress      Int      @default(0) // For progressive achievements

  // Relations
  user        User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  achievement Achievement @relation(fields: [achievementId], references: [id], onDelete: Cascade)

  // Constraints
  @@unique([userId, achievementId]) // User can only have each achievement once
  @@index([userId]) // User's achievements
  @@map("user_achievements")
}

// Favorite Establishment model for user's favorite restaurants and bars
model FavoriteEstablishment {
  id              String   @id @default(cuid())
  userId          String
  establishmentId String
  createdAt       DateTime @default(now())

  // Relations
  user          User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  establishment Establishment @relation(fields: [establishmentId], references: [id], onDelete: Cascade)

  // Constraints
  @@unique([userId, establishmentId]) // User can only favorite an establishment once
  @@index([userId]) // User's favorites
  @@index([establishmentId]) // Establishment's fans
  @@map("favorite_establishments")
}
