// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

// User model for authentication and profile
model User {
  id        String   @id @default(cuid())
  email     String   @unique
  username  String   @unique
  name      String
  avatar    String?
  bio       String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Authentication
  password String

  // Relations
  posts     Post[]
  likes     Like[]
  comments  Comment[]
  follows   Follow[] @relation("UserFollows")
  followers Follow[] @relation("UserFollowers")

  @@map("users")
}

// Restaurant model
model Restaurant {
  id          String   @id @default(cuid())
  name        String
  description String?
  address     String
  city        String
  state       String
  zipCode     String
  phone       String?
  website     String?
  imageUrl    String?
  latitude    Float?
  longitude   Float?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  posts Post[]

  @@map("restaurants")
}

// Post model for food discoveries
model Post {
  id          String   @id @default(cuid())
  content     String
  imageUrl    String?
  rating      Int? // 1-5 stars
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  userId       String
  user         User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  restaurantId String
  restaurant   Restaurant @relation(fields: [restaurantId], references: [id], onDelete: Cascade)
  likes        Like[]
  comments     Comment[]

  @@map("posts")
}

// Like model
model Like {
  id     String @id @default(cuid())
  userId String
  postId String

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  post Post @relation(fields: [postId], references: [id], onDelete: Cascade)

  @@unique([userId, postId])
  @@map("likes")
}

// Comment model
model Comment {
  id        String   @id @default(cuid())
  content   String
  createdAt DateTime @default(now())
  userId    String
  postId    String

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  post Post @relation(fields: [postId], references: [id], onDelete: Cascade)

  @@map("comments")
}

// Follow model for user relationships
model Follow {
  id          String @id @default(cuid())
  followerId  String
  followingId String

  follower  User @relation("UserFollows", fields: [followerId], references: [id], onDelete: Cascade)
  following User @relation("UserFollowers", fields: [followingId], references: [id], onDelete: Cascade)

  @@unique([followerId, followingId])
  @@map("follows")
}
